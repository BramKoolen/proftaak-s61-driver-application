apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "nl.fhict.denmarkroadtax"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "${app_name + versionNameSuffix}"
        }
        qaTest {
            signingConfig signingConfigs.debug
            initWith buildTypes.debug
            matchingFallbacks = ['release']

            debuggable false
            minifyEnabled true
            shrinkResources true
            useProguard true

            versionNameSuffix "${getVersionNameSuffix('-qaTest')}"
            applicationIdSuffix ".qaTest"

            resValue "string", "app_name", "${app_name + versionNameSuffix}"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        acceptance {
            signingConfig signingConfigs.debug
            initWith buildTypes.debug
            matchingFallbacks = ['release']

            debuggable false
            minifyEnabled true
            shrinkResources true
            useProguard true

            versionNameSuffix "${getVersionNameSuffix('-acceptance')}"
            applicationIdSuffix ".acceptance"

            resValue "string", "app_name", "${app_name + versionNameSuffix}"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            useProguard true

            resValue "string", "app_name", "${app_name}"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':data')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$reactive_x_version_java"
    implementation "io.reactivex.rxjava2:rxkotlin:$reactive_x_version_kotlin"
    implementation "io.reactivex.rxjava2:rxandroid:$reactive_x_version_android"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Lottie
    implementation 'com.airbnb.android:lottie:3.3.1'

    // Google maps
    implementation "com.google.android.gms:play-services-location:$gms_version"
    implementation "com.google.android.gms:play-services-places:$gms_version"

    // Joda time
    implementation "joda-time:joda-time:$joda_time_version"

    // Chuck
    debugImplementation "com.readystatesoftware.chuck:library:$chuck_version"
    qaTestImplementation "com.readystatesoftware.chuck:library:$chuck_version"
    releaseImplementation "com.readystatesoftware.chuck:library-no-op:$chuck_version"
}

/**
 * Returns a suffix to stick at the end of the versionName
 *
 * @param pDefaultSuffix
 *      String default suffix to use if none found in project properties
 * @return versionNameSuffix to use
 */
private def getVersionNameSuffix(final String pDefaultSuffix) {
    def suffix = pDefaultSuffix
    if (project.hasProperty('versionNameSuffix')) {
        suffix = StringUtils.prependIfMissing(project.getProperties().get('versionNameSuffix'),
                '-', "/", "_")
    }
    println "Applying version name suffix: $suffix"
    return suffix
}
